{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { APIService } from \"@/http/APIService\";\nconst apiService = new APIService();\nimport router from \"../router\";\nexport default {\n  data() {\n    return {\n      movies: {},\n      validUserName: \"Guest\",\n      movieSize: 0,\n      showMsg: '',\n      isMobile: false,\n      authenticated: false,\n      headers: [{\n        text: 'Name',\n        sortable: false,\n        align: 'left'\n      }, {\n        text: 'Description',\n        sortable: false,\n        align: 'left'\n      }, {\n        text: 'Year',\n        sortable: false,\n        align: 'left'\n      }, {\n        text: 'Rating',\n        sortable: false,\n        align: 'left'\n      }, {\n        text: 'Update',\n        sortable: false,\n        align: 'center'\n      }, {\n        text: 'Delete',\n        sortable: false,\n        align: 'center'\n      }]\n    };\n  },\n  mounted() {\n    this.authenticated = localStorage.getItem(\"isAuthenticated\");\n    this.getMovies();\n  },\n  methods: {\n    onResize() {\n      if (window.innerWidth > 600) this.isMobile = true;else this.isMobile = false;\n    },\n    showMessages() {\n      if (this.$route.params.msg) {\n        this.showMsg = this.$route.params.msg;\n      }\n    },\n    getMovies() {\n      apiService.getMovieList().then(response => {\n        this.movies = response.data.data;\n        this.movieSize = this.movies.length;\n        if (localStorage.getItem(\"isAuthenticated\") && JSON.parse(localStorage.getItem(\"isAuthenticated\")) === true) {\n          this.validUserName = JSON.parse(localStorage.getItem(\"log_user\"));\n        }\n      }).catch(error => {\n        localStorage.removeItem(\"isAuthenticated\");\n        localStorage.setItem(\"isAuthenticated\", false);\n        localStorage.removeItem(\"log_user\");\n        localStorage.removeItem(\"access\");\n        router.push(\"/auth\");\n      });\n    },\n    addNewMovie() {\n      if (localStorage.getItem(\"isAuthenticated\") && JSON.parse(localStorage.getItem(\"isAuthenticated\")) === true) {\n        router.push('/movie-create');\n      } else {\n        router.push(\"/auth\");\n      }\n    },\n    updateMovie(movie) {\n      router.push(\"/movie-create/\" + movie.pk);\n    },\n    deleteMovie(movie) {\n      if (confirm(\"Do you really want to delete?\")) {\n        apiService.deleteMovie(movie.pk).then(response => {\n          if (response.status === 204) {\n            router.push('/movie-list/deleted/');\n            this.getMovies();\n          }\n        }).catch(error => {\n          if (error.response.status === 401) {\n            // \"not authorized\"\n            router.push(\"/auth\");\n          } else if (error.response.status === 400) {\n            //\"bad request\"\n            this.showMsg = \"error\";\n          } else {\n            this.showMsg = \"error\";\n          }\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["APIService","apiService","router","data","movies","validUserName","movieSize","showMsg","isMobile","authenticated","headers","text","sortable","align","mounted","localStorage","getItem","getMovies","methods","onResize","window","innerWidth","showMessages","$route","params","msg","getMovieList","then","response","length","JSON","parse","catch","error","removeItem","setItem","push","addNewMovie","updateMovie","movie","pk","deleteMovie","confirm","status"],"sources":["/Users/tbonebrake/Desktop/FullStackDevelopment/movies/movie_fe/src/components/MovieList.vue"],"sourcesContent":["<template>\n    <div class=\"container-fluid\">\n        <div class=\"row align-items-center justify-content-center\">\n            <div class=\"col col-12 align-items-center justify-content-center\">\n                <blockquote>\n                    Welcome {{ validUserName }}!\n                    <footer>\n                        <small>\n                            <em>&mdash; Every great film should seem new every time you see it.- Roger Ebert</em>\n                        </small>\n                    </footer>\n                </blockquote>\n            </div>\n            <div class=\"col-12 col-md-10 col-lg-10 col-12 align-items-center justify-content-center\">\n                <div class=\"alert alert-success\"\n                     v-if=\"showMsg === 'new'\"\n                     :value=\"true\">\n                    New movie has been added.\n                </div>\n                <div class=\"alert alert-success\"\n                     v-if=\"showMsg === 'update'\"\n                     :value=\"true\">\n                    Movie information has been updated.\n                </div>\n                <div class=\"alert alert-success\"\n                     v-if=\"showMsg === 'deleted'\"\n                     :value=\"true\">\n                    Selected Movie has been deleted.\n                </div>\n            </div>\n        </div>\n        <!--Mobile device view-->\n        <div class=\"d-md-none\" id=\"collapsable-card\" style=\"width: 80%\">\n            <button v-if=\"this.authenticated === 'true'\" type=\"button\" class=\"btn btn-primary\" @click=\"addNewMovie\">\n                <font-awesome-icon icon=\"plus\"/>\n            </button>\n            <div class=\"card\" v-for=\"movie in movies\" v-bind:key=\"movie\">\n                <div class=\"card-header\" :id=\"'heading' + movie.name\">\n                    <button class=\"btn btn-link collapsed\" data-bs-toggle=\"collapse\"\n                            :data-bs-target=\"'#collapse' + movie.pk\"\n                            aria-expanded=\"true\" :aria-controls=\"'collapse' + movie.pk\">\n                        <h6 style=\"color: #0275d8; float: left\">{{ movie.name }}</h6>\n                    </button>\n                </div>\n                <div :id=\"'collapse' + movie.pk\" class=\"collapse\" :aria-labelledby=\"'heading' + \n                            movie.pk\" data-bs-parent=\"#collapsable-card\">\n                    <div class=\"card-body\">\n                        <p><b>Name:</b> {{ movie.name }}</p>\n                        <p><b>Description:</b>{{ movie.description }}</p>\n                        <p><b>Year:</b> {{ movie.year }}</p>\n                        <p><b>Rating:</b> {{ movie.rating }}</p>\n                        <div v-if=\"this.authenticated === 'true'\" class=\"btn-group\">\n                            <button @click=\"updateMovie(movie)\" style=\"background-color: transparent; padding: 5;\">\n                                <font-awesome-icon icon=\"pencil\"/>\n                            </button>\n                            <button @click=\"deleteMovie(movie)\" style=\"background-color: transparent; padding: 5;\">\n                                <font-awesome-icon icon=\"trash\"/>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <!--non-Mobile device view-->\n        <!-- Data table - only allow update/delete when authenticated user -->\n        <div class=\"row align-items-center justify-content-center\">\n            <div class=\"col col-12 col-md-10 d-none d-xl-block d-lg-block d-md-block\">\n                <table class=\"table table-hover\" style=\"overflow-y: auto\"\n                       :headers=\"headers\">\n                    <thead>\n                    <tr>\n                        <th scope=\"col\">Name</th>\n                        <th scope=\"col\">Description</th>\n                        <th scope=\"col\">Year</th>\n                        <th scope=\"col\">Rating</th>\n                        <th v-if=\"this.authenticated === 'true'\" scope=\"col\">Update</th>\n                        <th v-if=\"this.authenticated === 'true'\" scope=\"col\">Delete</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    <tr v-for=\"movie in movies\" v-bind:key=\"movie\">\n                        <th scope=\"row\">{{ movie.name }}</th>\n                        <td>{{ movie.description }}</td>\n                        <td>{{ movie.year }}</td>\n                        <td>{{ movie.rating }}</td>\n\n                        <td v-if=\"this.authenticated === 'true'\" @click=\"updateMovie(movie)\">\n                            <button style=\"background-color: transparent; padding: 0;\">\n                                <font-awesome-icon icon=\"pencil\"/>\n                            </button>\n                        </td>\n                        <td v-if=\"this.authenticated === 'true'\" @click=\"deleteMovie(movie)\">\n                            <button style=\"background-color: transparent; padding: 0;\">\n                                <font-awesome-icon icon=\"trash\"/>\n                            </button>\n                        </td>\n                    </tr>\n                    </tbody>\n                </table>\n                <!-- Only allow add of movie when authenticated user -->\n                <div v-if=\"this.authenticated === 'true'\">\n                    <button type=\"button\" class=\"btn btn-primary\" @click=\"addNewMovie\">Add New Movie</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\n    import {APIService} from \"@/http/APIService\";\n\n    const apiService = new APIService();\n    import router from \"../router\";\n\n    export default {\n        data() {\n            return {\n                movies: {},\n                validUserName: \"Guest\",\n                movieSize: 0,\n                showMsg: '',\n                isMobile: false,\n                authenticated: false,\n                headers: [\n                    {text: 'Name', sortable: false, align: 'left'},\n                    {text: 'Description', sortable: false, align: 'left',},\n                    {text: 'Year', sortable: false, align: 'left',},\n                    {text: 'Rating', sortable: false, align: 'left',},\n                    {text: 'Update', sortable: false, align: 'center',},\n                    {text: 'Delete', sortable: false, align: 'center',},\n                ],\n            };\n        },\n        mounted() {\n            this.authenticated = localStorage.getItem(\"isAuthenticated\")\n            this.getMovies();\n        },\n        methods: {\n            onResize() {\n                if (window.innerWidth > 600)\n                    this.isMobile = true;\n                else\n                    this.isMobile = false;\n            },\n            showMessages() {\n                if (this.$route.params.msg) {\n                    this.showMsg = this.$route.params.msg;\n                }\n            },\n            getMovies() {\n                apiService\n                    .getMovieList()\n                    .then((response) => {\n                        this.movies = response.data.data;\n                        this.movieSize = this.movies.length;\n                        if (\n                            localStorage.getItem(\"isAuthenticated\") &&\n                            JSON.parse(localStorage.getItem(\"isAuthenticated\")) === true\n                        ) {\n                            this.validUserName = JSON.parse(localStorage.getItem(\"log_user\"));\n                        }\n                    })\n                    .catch((error) => {\n                        localStorage.removeItem(\"isAuthenticated\");\n                        localStorage.setItem(\"isAuthenticated\", false)\n                        localStorage.removeItem(\"log_user\");\n                        localStorage.removeItem(\"access\");\n                        router.push(\"/auth\");\n                    });\n            },\n            addNewMovie() {\n                if (localStorage.getItem(\"isAuthenticated\")\n                    && JSON.parse(localStorage.getItem(\"isAuthenticated\")) === true) {\n                    router.push('/movie-create');\n                } else {\n                    router.push(\"/auth\");\n                }\n            },\n            updateMovie(movie) {\n                router.push(\"/movie-create/\" + movie.pk);\n            },\n            deleteMovie(movie) {\n                if (confirm(\"Do you really want to delete?\")) {\n                    apiService.deleteMovie(movie.pk).then(response => {\n                        if (response.status === 204) {\n                            router.push('/movie-list/deleted/')\n                            this.getMovies()\n                        }\n                    }).catch(error => {\n                        if (error.response.status === 401) { // \"not authorized\"\n                            router.push(\"/auth\");\n                        } else if (error.response.status === 400) { //\"bad request\"\n                            this.showMsg = \"error\";\n                        } else {\n                            this.showMsg = \"error\";\n                        }\n\n                    });\n                }\n            }\n        },\n    };\n</script>\n\n<style>\n    button {\n        padding: 1rem;\n        border: 0;\n        cursor: pointer;\n    }\n</style>\n"],"mappings":";AA6GI,SAAQA,UAAU,QAAO,mBAAmB;AAE5C,MAAMC,UAAS,GAAI,IAAID,UAAU,CAAC,CAAC;AACnC,OAAOE,MAAK,MAAO,WAAW;AAE9B,eAAe;EACXC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,MAAM,EAAE,CAAC,CAAC;MACVC,aAAa,EAAE,OAAO;MACtBC,SAAS,EAAE,CAAC;MACZC,OAAO,EAAE,EAAE;MACXC,QAAQ,EAAE,KAAK;MACfC,aAAa,EAAE,KAAK;MACpBC,OAAO,EAAE,CACL;QAACC,IAAI,EAAE,MAAM;QAAEC,QAAQ,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAM,CAAC,EAC9C;QAACF,IAAI,EAAE,aAAa;QAAEC,QAAQ,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAO,CAAC,EACtD;QAACF,IAAI,EAAE,MAAM;QAAEC,QAAQ,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAO,CAAC,EAC/C;QAACF,IAAI,EAAE,QAAQ;QAAEC,QAAQ,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAO,CAAC,EACjD;QAACF,IAAI,EAAE,QAAQ;QAAEC,QAAQ,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAS,CAAC,EACnD;QAACF,IAAI,EAAE,QAAQ;QAAEC,QAAQ,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAS,CAAC;IAE3D,CAAC;EACL,CAAC;EACDC,OAAOA,CAAA,EAAG;IACN,IAAI,CAACL,aAAY,GAAIM,YAAY,CAACC,OAAO,CAAC,iBAAiB;IAC3D,IAAI,CAACC,SAAS,CAAC,CAAC;EACpB,CAAC;EACDC,OAAO,EAAE;IACLC,QAAQA,CAAA,EAAG;MACP,IAAIC,MAAM,CAACC,UAAS,GAAI,GAAG,EACvB,IAAI,CAACb,QAAO,GAAI,IAAI,MAEpB,IAAI,CAACA,QAAO,GAAI,KAAK;IAC7B,CAAC;IACDc,YAAYA,CAAA,EAAG;MACX,IAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,GAAG,EAAE;QACxB,IAAI,CAAClB,OAAM,GAAI,IAAI,CAACgB,MAAM,CAACC,MAAM,CAACC,GAAG;MACzC;IACJ,CAAC;IACDR,SAASA,CAAA,EAAG;MACRhB,UAAS,CACJyB,YAAY,CAAC,EACbC,IAAI,CAAEC,QAAQ,IAAK;QAChB,IAAI,CAACxB,MAAK,GAAIwB,QAAQ,CAACzB,IAAI,CAACA,IAAI;QAChC,IAAI,CAACG,SAAQ,GAAI,IAAI,CAACF,MAAM,CAACyB,MAAM;QACnC,IACId,YAAY,CAACC,OAAO,CAAC,iBAAiB,KACtCc,IAAI,CAACC,KAAK,CAAChB,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,MAAM,IAAG,EAC7D;UACE,IAAI,CAACX,aAAY,GAAIyB,IAAI,CAACC,KAAK,CAAChB,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC;QACrE;MACJ,CAAC,EACAgB,KAAK,CAAEC,KAAK,IAAK;QACdlB,YAAY,CAACmB,UAAU,CAAC,iBAAiB,CAAC;QAC1CnB,YAAY,CAACoB,OAAO,CAAC,iBAAiB,EAAE,KAAK;QAC7CpB,YAAY,CAACmB,UAAU,CAAC,UAAU,CAAC;QACnCnB,YAAY,CAACmB,UAAU,CAAC,QAAQ,CAAC;QACjChC,MAAM,CAACkC,IAAI,CAAC,OAAO,CAAC;MACxB,CAAC,CAAC;IACV,CAAC;IACDC,WAAWA,CAAA,EAAG;MACV,IAAItB,YAAY,CAACC,OAAO,CAAC,iBAAiB,KACnCc,IAAI,CAACC,KAAK,CAAChB,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,MAAM,IAAI,EAAE;QACjEd,MAAM,CAACkC,IAAI,CAAC,eAAe,CAAC;MAChC,OAAO;QACHlC,MAAM,CAACkC,IAAI,CAAC,OAAO,CAAC;MACxB;IACJ,CAAC;IACDE,WAAWA,CAACC,KAAK,EAAE;MACfrC,MAAM,CAACkC,IAAI,CAAC,gBAAe,GAAIG,KAAK,CAACC,EAAE,CAAC;IAC5C,CAAC;IACDC,WAAWA,CAACF,KAAK,EAAE;MACf,IAAIG,OAAO,CAAC,+BAA+B,CAAC,EAAE;QAC1CzC,UAAU,CAACwC,WAAW,CAACF,KAAK,CAACC,EAAE,CAAC,CAACb,IAAI,CAACC,QAAO,IAAK;UAC9C,IAAIA,QAAQ,CAACe,MAAK,KAAM,GAAG,EAAE;YACzBzC,MAAM,CAACkC,IAAI,CAAC,sBAAsB;YAClC,IAAI,CAACnB,SAAS,CAAC;UACnB;QACJ,CAAC,CAAC,CAACe,KAAK,CAACC,KAAI,IAAK;UACd,IAAIA,KAAK,CAACL,QAAQ,CAACe,MAAK,KAAM,GAAG,EAAE;YAAE;YACjCzC,MAAM,CAACkC,IAAI,CAAC,OAAO,CAAC;UACxB,OAAO,IAAIH,KAAK,CAACL,QAAQ,CAACe,MAAK,KAAM,GAAG,EAAE;YAAE;YACxC,IAAI,CAACpC,OAAM,GAAI,OAAO;UAC1B,OAAO;YACH,IAAI,CAACA,OAAM,GAAI,OAAO;UAC1B;QAEJ,CAAC,CAAC;MACN;IACJ;EACJ;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}